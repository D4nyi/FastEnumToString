using System;

using Microsoft.CodeAnalysis;

namespace FastEnumToString
{
    /// <summary>
    /// Generates a <em>FastToString</em> method for each enum in the referencing assembly.<br />
    /// From <see cref="ISourceGenerator"/>:<br />
    /// <inheritdoc/>
    /// </summary>
    [Generator]
    public class EnumToStringGenerator : ISourceGenerator
    {
        private const string GeneratedFileName = "EnumStringConverter.g.cs";
        private const string AttributesFile = "FastToStringAttributes.g.cs";
        private const string Attributes = @"// <auto-generated />

namespace FastEnumToString
{
    [global::System.AttributeUsage(global::System.AttributeTargets.Enum)]
    public class ExcludeToStringAttribute : global::System.Attribute { }

    [global::System.AttributeUsage(global::System.AttributeTargets.Enum)]
    public class OverrideToStringDefaultAttribute : global::System.Attribute
    {
        public OverrideToStringDefaultAttribute() { }
        public OverrideToStringDefaultAttribute(int fallback) { }
    }
}";

        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
//#if DEBUG
//            if (!System.Diagnostics.Debugger.IsAttached)
//            {
//                System.Diagnostics.Debugger.Launch();
//            }
//#endif

            context.RegisterForPostInitialization(ctx =>
                ctx.AddSource(AttributesFile, Attributes));
            context.RegisterForSyntaxNotifications(() => new EnumToStringSyntaxReciever());
        }

        /// <inheritdoc/>
        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is EnumToStringSyntaxReciever reciever))
            {
                return;
            }

            if (reciever.Enums.Count == 0)
            {
                context.AddSource(GeneratedFileName, EnumProcessor.Empty);
                return;
            }

            context
                .AnalyzerConfigOptions.GlobalOptions
                .TryGetValue("build_property.FastEnumFallbackValue", out string fallback);
            context
                .AnalyzerConfigOptions.GlobalOptions
                .TryGetValue("build_property.rootnamespace", out string rootNameSpace);

            int fallbackValue = ParseFallbackValue(fallback);

            EnumProcessor processor = new EnumProcessor(context, rootNameSpace, fallbackValue);

            string generatedClass = processor.Process(reciever.Enums);

            context.AddSource(GeneratedFileName, generatedClass);
        }

        private static int ParseFallbackValue(string fallback)
        {
            if (String.IsNullOrWhiteSpace(fallback))
            {
                return -1;
            }

            fallback = fallback.Trim();

            bool onlyDigits = true;
            for (int i = 0; i < fallback.Length; i++)
            {
                if (fallback[i] < '0' || fallback[i] > '9')
                {
                    onlyDigits = false;
                    break;
                }
            }

            if (onlyDigits && Int32.TryParse(fallback, out int fallbackValue))
            {
                return fallbackValue;
            }

            return fallback.Equals("first", StringComparison.OrdinalIgnoreCase) ? 1 : -1;
        }
    }
}

